// Code generated by protoc-gen-box. DO NOT EDIT.
// source: searchd.proto

package searchdpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import pb "github.com/tddhit/xsearch/pb"

import (
	tr "github.com/tddhit/box/transport"
	tropt "github.com/tddhit/box/transport/option"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import (
	context1 "golang.org/x/net/context"
	grpc1 "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type InfoReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoReq) Reset()         { *m = InfoReq{} }
func (m *InfoReq) String() string { return proto.CompactTextString(m) }
func (*InfoReq) ProtoMessage()    {}
func (*InfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_searchd_b290f293f7f97298, []int{0}
}
func (m *InfoReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoReq.Unmarshal(m, b)
}
func (m *InfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoReq.Marshal(b, m, deterministic)
}
func (dst *InfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoReq.Merge(dst, src)
}
func (m *InfoReq) XXX_Size() int {
	return xxx_messageInfo_InfoReq.Size(m)
}
func (m *InfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_InfoReq proto.InternalMessageInfo

type InfoRsp struct {
	Shards               []string `protobuf:"bytes,1,rep,name=shards,proto3" json:"shards,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoRsp) Reset()         { *m = InfoRsp{} }
func (m *InfoRsp) String() string { return proto.CompactTextString(m) }
func (*InfoRsp) ProtoMessage()    {}
func (*InfoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_searchd_b290f293f7f97298, []int{1}
}
func (m *InfoRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoRsp.Unmarshal(m, b)
}
func (m *InfoRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoRsp.Marshal(b, m, deterministic)
}
func (dst *InfoRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoRsp.Merge(dst, src)
}
func (m *InfoRsp) XXX_Size() int {
	return xxx_messageInfo_InfoRsp.Size(m)
}
func (m *InfoRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoRsp.DiscardUnknown(m)
}

var xxx_messageInfo_InfoRsp proto.InternalMessageInfo

func (m *InfoRsp) GetShards() []string {
	if m != nil {
		return m.Shards
	}
	return nil
}

type SearchReq struct {
	TraceID              string    `protobuf:"bytes,1,opt,name=traceID,proto3" json:"traceID,omitempty"`
	ShardID              string    `protobuf:"bytes,2,opt,name=shardID,proto3" json:"shardID,omitempty"`
	Query                *pb.Query `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	Start                uint64    `protobuf:"varint,4,opt,name=start,proto3" json:"start,omitempty"`
	Count                uint32    `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SearchReq) Reset()         { *m = SearchReq{} }
func (m *SearchReq) String() string { return proto.CompactTextString(m) }
func (*SearchReq) ProtoMessage()    {}
func (*SearchReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_searchd_b290f293f7f97298, []int{2}
}
func (m *SearchReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchReq.Unmarshal(m, b)
}
func (m *SearchReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchReq.Marshal(b, m, deterministic)
}
func (dst *SearchReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchReq.Merge(dst, src)
}
func (m *SearchReq) XXX_Size() int {
	return xxx_messageInfo_SearchReq.Size(m)
}
func (m *SearchReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchReq.DiscardUnknown(m)
}

var xxx_messageInfo_SearchReq proto.InternalMessageInfo

func (m *SearchReq) GetTraceID() string {
	if m != nil {
		return m.TraceID
	}
	return ""
}

func (m *SearchReq) GetShardID() string {
	if m != nil {
		return m.ShardID
	}
	return ""
}

func (m *SearchReq) GetQuery() *pb.Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *SearchReq) GetStart() uint64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *SearchReq) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type SearchRsp struct {
	Docs                 []*pb.Document `protobuf:"bytes,1,rep,name=docs,proto3" json:"docs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SearchRsp) Reset()         { *m = SearchRsp{} }
func (m *SearchRsp) String() string { return proto.CompactTextString(m) }
func (*SearchRsp) ProtoMessage()    {}
func (*SearchRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_searchd_b290f293f7f97298, []int{3}
}
func (m *SearchRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchRsp.Unmarshal(m, b)
}
func (m *SearchRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchRsp.Marshal(b, m, deterministic)
}
func (dst *SearchRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchRsp.Merge(dst, src)
}
func (m *SearchRsp) XXX_Size() int {
	return xxx_messageInfo_SearchRsp.Size(m)
}
func (m *SearchRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SearchRsp proto.InternalMessageInfo

func (m *SearchRsp) GetDocs() []*pb.Document {
	if m != nil {
		return m.Docs
	}
	return nil
}

func init() {
	proto.RegisterType((*InfoReq)(nil), "searchdpb.InfoReq")
	proto.RegisterType((*InfoRsp)(nil), "searchdpb.InfoRsp")
	proto.RegisterType((*SearchReq)(nil), "searchdpb.SearchReq")
	proto.RegisterType((*SearchRsp)(nil), "searchdpb.SearchRsp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ tr.Server
var _ tr.ClientConn
var _ tropt.CallOption

type AdminGrpcClient interface {
	Info(ctx context.Context, in *InfoReq, opts ...tropt.CallOption) (*InfoRsp, error)
}

type adminGrpcClient struct {
	cc tr.ClientConn
}

func NewAdminGrpcClient(cc tr.ClientConn) AdminGrpcClient {
	return &adminGrpcClient{cc}
}

func (c *adminGrpcClient) Info(ctx context.Context, in *InfoReq, opts ...tropt.CallOption) (*InfoRsp, error) {
	out := new(InfoRsp)
	err := c.cc.Invoke(ctx, "/searchdpb.Admin/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type adminGrpcServiceDesc struct {
	desc *grpc.ServiceDesc
}

func (d *adminGrpcServiceDesc) Desc() interface{} {
	return d.desc
}

var AdminGrpcServiceDesc = &adminGrpcServiceDesc{&_Admin_serviceDesc}

type SearchdGrpcClient interface {
	Search(ctx context.Context, in *SearchReq, opts ...tropt.CallOption) (*SearchRsp, error)
}

type searchdGrpcClient struct {
	cc tr.ClientConn
}

func NewSearchdGrpcClient(cc tr.ClientConn) SearchdGrpcClient {
	return &searchdGrpcClient{cc}
}

func (c *searchdGrpcClient) Search(ctx context.Context, in *SearchReq, opts ...tropt.CallOption) (*SearchRsp, error) {
	out := new(SearchRsp)
	err := c.cc.Invoke(ctx, "/searchdpb.Searchd/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type searchdGrpcServiceDesc struct {
	desc *grpc.ServiceDesc
}

func (d *searchdGrpcServiceDesc) Desc() interface{} {
	return d.desc
}

var SearchdGrpcServiceDesc = &searchdGrpcServiceDesc{&_Searchd_serviceDesc}

// Reference imports to suppress errors if they are not otherwise used.
var _ context1.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdminClient interface {
	Info(ctx context1.Context, in *InfoReq, opts ...grpc1.CallOption) (*InfoRsp, error)
}

type adminClient struct {
	cc *grpc1.ClientConn
}

func NewAdminClient(cc *grpc1.ClientConn) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) Info(ctx context1.Context, in *InfoReq, opts ...grpc1.CallOption) (*InfoRsp, error) {
	out := new(InfoRsp)
	err := c.cc.Invoke(ctx, "/searchdpb.Admin/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
type AdminServer interface {
	Info(context1.Context, *InfoReq) (*InfoRsp, error)
}

func RegisterAdminServer(s *grpc1.Server, srv AdminServer) {
	s.RegisterService(&_Admin_serviceDesc, srv)
}

func _Admin_Info_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Info(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/searchdpb.Admin/Info",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Info(ctx, req.(*InfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Admin_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "searchdpb.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Admin_Info_Handler,
		},
	},
	Streams:  []grpc1.StreamDesc{},
	Metadata: "searchd.proto",
}

// SearchdClient is the client API for Searchd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SearchdClient interface {
	Search(ctx context1.Context, in *SearchReq, opts ...grpc1.CallOption) (*SearchRsp, error)
}

type searchdClient struct {
	cc *grpc1.ClientConn
}

func NewSearchdClient(cc *grpc1.ClientConn) SearchdClient {
	return &searchdClient{cc}
}

func (c *searchdClient) Search(ctx context1.Context, in *SearchReq, opts ...grpc1.CallOption) (*SearchRsp, error) {
	out := new(SearchRsp)
	err := c.cc.Invoke(ctx, "/searchdpb.Searchd/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchdServer is the server API for Searchd service.
type SearchdServer interface {
	Search(context1.Context, *SearchReq) (*SearchRsp, error)
}

func RegisterSearchdServer(s *grpc1.Server, srv SearchdServer) {
	s.RegisterService(&_Searchd_serviceDesc, srv)
}

func _Searchd_Search_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchdServer).Search(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/searchdpb.Searchd/Search",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(SearchdServer).Search(ctx, req.(*SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Searchd_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "searchdpb.Searchd",
	HandlerType: (*SearchdServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _Searchd_Search_Handler,
		},
	},
	Streams:  []grpc1.StreamDesc{},
	Metadata: "searchd.proto",
}

func init() { proto.RegisterFile("searchd.proto", fileDescriptor_searchd_b290f293f7f97298) }

var fileDescriptor_searchd_b290f293f7f97298 = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xcd, 0x4a, 0xc4, 0x30,
	0x14, 0x85, 0x8d, 0xd3, 0x4e, 0xe9, 0x1d, 0x06, 0xe4, 0x3a, 0x48, 0xe8, 0xaa, 0x76, 0xa1, 0x5d,
	0x75, 0xa4, 0x8a, 0xe0, 0x72, 0xa0, 0x9b, 0x2e, 0x8d, 0x4f, 0xd0, 0x9f, 0xc8, 0xb8, 0x98, 0x26,
	0x4d, 0x52, 0xd0, 0xe7, 0xf0, 0x85, 0x25, 0x4d, 0x2c, 0x03, 0xba, 0x3b, 0xdf, 0xb9, 0x3f, 0xb9,
	0x39, 0xb0, 0xd5, 0xbc, 0x51, 0xdd, 0xb1, 0x2f, 0xa4, 0x12, 0x46, 0x60, 0xec, 0x51, 0xb6, 0x09,
	0xfd, 0x74, 0x7a, 0x2f, 0xdb, 0xbd, 0x97, 0xae, 0x29, 0x8b, 0x21, 0xaa, 0x87, 0x77, 0xc1, 0xf8,
	0x98, 0xdd, 0x7a, 0xa9, 0x25, 0xde, 0xc0, 0x5a, 0x1f, 0x1b, 0xd5, 0x6b, 0x4a, 0xd2, 0x55, 0x1e,
	0x33, 0x4f, 0xd9, 0x37, 0x81, 0xf8, 0x6d, 0x1e, 0x67, 0x7c, 0x44, 0x0a, 0x91, 0x51, 0x4d, 0xc7,
	0xeb, 0x8a, 0x92, 0x94, 0xe4, 0x31, 0xfb, 0x45, 0x5b, 0x99, 0x27, 0xea, 0x8a, 0x5e, 0xba, 0x8a,
	0x47, 0xbc, 0x83, 0x70, 0x9c, 0xb8, 0xfa, 0xa2, 0xab, 0x94, 0xe4, 0x9b, 0xf2, 0xaa, 0xf0, 0xe7,
	0xc8, 0xb6, 0x78, 0xb5, 0x3e, 0x73, 0x65, 0xdc, 0x41, 0xa8, 0x4d, 0xa3, 0x0c, 0x0d, 0x52, 0x92,
	0x07, 0xcc, 0x81, 0x75, 0x3b, 0x31, 0x0d, 0x86, 0x86, 0x29, 0xc9, 0xb7, 0xcc, 0x41, 0xf6, 0xb4,
	0x1c, 0xa5, 0x25, 0xde, 0x43, 0xd0, 0x8b, 0xce, 0x1d, 0xbe, 0x29, 0xaf, 0xcf, 0xf6, 0x57, 0xa2,
	0x9b, 0x4e, 0x7c, 0x30, 0x6c, 0x6e, 0x28, 0x5f, 0x20, 0x3c, 0xf4, 0xa7, 0x8f, 0x01, 0x1f, 0x20,
	0xb0, 0xff, 0x46, 0x2c, 0x96, 0xc0, 0x0a, 0x9f, 0x49, 0xf2, 0xc7, 0xd3, 0x32, 0xbb, 0x28, 0x0f,
	0x10, 0xb9, 0x07, 0x7b, 0x7c, 0x86, 0xb5, 0x93, 0xb8, 0x3b, 0x6b, 0x5d, 0x32, 0x4a, 0xfe, 0x71,
	0xed, 0x8a, 0x76, 0x3d, 0xc7, 0xff, 0xf8, 0x13, 0x00, 0x00, 0xff, 0xff, 0xa4, 0xe8, 0x23, 0x7a,
	0xb4, 0x01, 0x00, 0x00,
}
